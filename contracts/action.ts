/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type {
  SendTransactionResult,
  TransactionToSign,
  SendTransactionFrom,
} from '@algorandfoundation/algokit-utils/types/transaction'
import type { TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  hints: {
    'createApplication()void': {
      call_config: {
        no_op: 'CREATE',
      },
    },
    'bootstrap(uint64,uint64,uint64)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'changeTokenAsset(asset)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'changeMinDonationAmount(uint64)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'donate(axfer)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'dispense(uint64,string,uint64,asset)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
    'recollect(address,asset)void': {
      call_config: {
        no_op: 'CALL',
      },
    },
  },
  bare_call_config: {
    no_op: 'NEVER',
    opt_in: 'NEVER',
    close_out: 'NEVER',
    update_application: 'NEVER',
    delete_application: 'NEVER',
  },
  schema: {
    local: {
      declared: {},
      reserved: {},
    },
    global: {
      declared: {
        tokenAsset: {
          type: 'uint64',
          key: 'ta',
        },
        goal: {
          type: 'uint64',
          key: 'g',
        },
        totalDonations: {
          type: 'uint64',
          key: 'td',
        },
        startDate: {
          type: 'uint64',
          key: 'sd',
        },
        endDate: {
          type: 'uint64',
          key: 'ed',
        },
        minDonationAmount: {
          type: 'uint64',
          key: 'mda',
        },
        availableBalance: {
          type: 'uint64',
          key: 'ab',
        },
      },
      reserved: {},
    },
  },
  state: {
    global: {
      num_byte_slices: 0,
      num_uints: 7,
    },
    local: {
      num_byte_slices: 0,
      num_uints: 0,
    },
  },
  source: {
    approval:
      '',
    clear: 'I3ByYWdtYSB2ZXJzaW9uIDk=',
  },
  contract: {
    name: 'Action',
    desc: '',
    methods: [
      {
        name: 'createApplication',
        args: [],
        desc: 'Initializes the smart contract with default values.Sets the USDC token to zero index initially.',
        returns: {
          type: 'void',
          desc: '',
        },
      },
      {
        name: 'bootstrap',
        args: [
          {
            name: 'startDate',
            type: 'uint64',
            desc: 'The start date of the action (unix timestamp).',
          },
          {
            name: 'endDate',
            type: 'uint64',
            desc: 'The end date of the action (unix timestamp).',
          },
          {
            name: 'goal',
            type: 'uint64',
            desc: 'The goal amount for the action in USDC.',
          },
        ],
        desc: 'Sets up the initial configuration of the action.Validates the start and end dates, and the goal amount.',
        returns: {
          type: 'void',
          desc: '',
        },
      },
      {
        name: 'changeTokenAsset',
        args: [
          {
            name: 'newTokenAsset',
            type: 'asset',
            desc: 'The new asset to be associated with the contract.',
          },
        ],
        desc: 'Changes the token asset associated with the contract.This function is intended for use by the governance address.',
        returns: {
          type: 'void',
          desc: '',
        },
      },
      {
        name: 'changeMinDonationAmount',
        args: [
          {
            name: 'newMinDonationAmount',
            type: 'uint64',
            desc: 'The new minimum donation amount in USDC.',
          },
        ],
        desc: 'Changes the minimum donation amount required to participate in the action.This function can only be called by the contract creator.',
        returns: {
          type: 'void',
          desc: '',
        },
      },
      {
        name: 'donate',
        args: [
          {
            name: 'donation',
            type: 'axfer',
            desc: 'The donation transaction.',
          },
        ],
        desc: 'Allows a user to donate to the action.Validates the donation amount and updates the total donations and available balance.',
        returns: {
          type: 'void',
          desc: '',
        },
      },
      {
        name: 'dispense',
        args: [
          {
            name: 'amount',
            type: 'uint64',
            desc: 'The amount of funds to dispense.',
          },
          {
            name: 'description',
            type: 'string',
            desc: 'Description of the purpose for dispensing funds.',
          },
          {
            name: 'id',
            type: 'uint64',
            desc: 'Unique identifier for the dispense record.',
          },
          {
            name: 'transferToken',
            type: 'asset',
            desc: 'The asset to be dispensed.',
          },
        ],
        desc: 'Dispenses funds from the contract for the specified purpose.This function can only be called by the contract creator.',
        returns: {
          type: 'void',
          desc: '',
        },
      },
      {
        name: 'recollect',
        args: [
          {
            name: 'receiver',
            type: 'address',
            desc: '',
          },
          {
            name: 'transferToken',
            type: 'asset',
            desc: '',
          },
        ],
        desc: '',
        returns: {
          type: 'void',
          desc: '',
        },
      },
    ],
  },
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp = { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn = { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut = { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp = { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp = { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the Action smart contract.
 */
export type Action = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    'createApplication()void' | 'createApplication',
    {
      argsObj: {}
      argsTuple: []
      returns: void
    }
  > &
    Record<
      'bootstrap(uint64,uint64,uint64)void' | 'bootstrap',
      {
        argsObj: {
          /**
           * The start date of the action (unix timestamp).
           */
          startDate: bigint | number
          /**
           * The end date of the action (unix timestamp).
           */
          endDate: bigint | number
          /**
           * The goal amount for the action in USDC.
           */
          goal: bigint | number
        }
        argsTuple: [startDate: bigint | number, endDate: bigint | number, goal: bigint | number]
        returns: void
      }
    > &
    Record<
      'changeTokenAsset(asset)void' | 'changeTokenAsset',
      {
        argsObj: {
          /**
           * The new asset to be associated with the contract.
           */
          newTokenAsset: number | bigint
        }
        argsTuple: [newTokenAsset: number | bigint]
        returns: void
      }
    > &
    Record<
      'changeMinDonationAmount(uint64)void' | 'changeMinDonationAmount',
      {
        argsObj: {
          /**
           * The new minimum donation amount in USDC.
           */
          newMinDonationAmount: bigint | number
        }
        argsTuple: [newMinDonationAmount: bigint | number]
        returns: void
      }
    > &
    Record<
      'donate(axfer)void' | 'donate',
      {
        argsObj: {
          /**
           * The donation transaction.
           */
          donation: TransactionToSign | Transaction | Promise<SendTransactionResult>
        }
        argsTuple: [donation: TransactionToSign | Transaction | Promise<SendTransactionResult>]
        returns: void
      }
    > &
    Record<
      'dispense(uint64,string,uint64,asset)void' | 'dispense',
      {
        argsObj: {
          /**
           * The amount of funds to dispense.
           */
          amount: bigint | number
          /**
           * Description of the purpose for dispensing funds.
           */
          description: string
          /**
           * Unique identifier for the dispense record.
           */
          id: bigint | number
          /**
           * The asset to be dispensed.
           */
          transferToken: number | bigint
        }
        argsTuple: [amount: bigint | number, description: string, id: bigint | number, transferToken: number | bigint]
        returns: void
      }
    > &
    Record<
      'recollect(address,asset)void' | 'recollect',
      {
        argsObj: {
          receiver: string
          transferToken: number | bigint
        }
        argsTuple: [receiver: string, transferToken: number | bigint]
        returns: void
      }
    >
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      ta?: IntegerState
      g?: IntegerState
      td?: IntegerState
      sd?: IntegerState
      ed?: IntegerState
      mda?: IntegerState
      ab?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type ActionSig = keyof Action['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends ActionSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams &
  CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Action smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends ActionSig> = Action['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Action smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ActionSig> = Action['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type ActionCreateCalls = (typeof ActionCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type ActionCreateCallParams = TypedCallParams<'createApplication()void'> & OnCompleteNoOp
/**
 * Defines arguments required for the deploy method.
 */
export type ActionDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: ActionCreateCalls) => ActionCreateCallParams
}

/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class ActionCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Action smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(
        args: MethodArgs<'createApplication()void'>,
        params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & OnCompleteNoOp = {}
      ) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap(uint64,uint64,uint64)void ABI method
   *
   * Sets up the initial configuration of the action.Validates the start and end dates, and the goal amount.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(
    args: MethodArgs<'bootstrap(uint64,uint64,uint64)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: 'bootstrap(uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.startDate, args.endDate, args.goal],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the changeTokenAsset(asset)void ABI method
   *
   * Changes the token asset associated with the contract.This function is intended for use by the governance address.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static changeTokenAsset(
    args: MethodArgs<'changeTokenAsset(asset)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: 'changeTokenAsset(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newTokenAsset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the changeMinDonationAmount(uint64)void ABI method
   *
   * Changes the minimum donation amount required to participate in the action.This function can only be called by the contract creator.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static changeMinDonationAmount(
    args: MethodArgs<'changeMinDonationAmount(uint64)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: 'changeMinDonationAmount(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newMinDonationAmount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the donate(axfer)void ABI method
   *
   * Allows a user to donate to the action.Validates the donation amount and updates the total donations and available balance.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static donate(args: MethodArgs<'donate(axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'donate(axfer)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.donation],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the dispense(uint64,string,uint64,asset)void ABI method
   *
   * Dispenses funds from the contract for the specified purpose.This function can only be called by the contract creator.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static dispense(
    args: MethodArgs<'dispense(uint64,string,uint64,asset)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: 'dispense(uint64,string,uint64,asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount, args.description, args.id, args.transferToken],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the recollect(address,asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static recollect(
    args: MethodArgs<'recollect(address,asset)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: 'recollect(address,asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.receiver, args.transferToken],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Action smart contract
 */
export class ActionClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `ActionClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(
    appDetails: AppDetails,
    private algod: Algodv2
  ) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient(
      {
        ...appDetails,
        app: APP_SPEC,
      },
      algod
    )
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(
    result: AppCallTransactionResult,
    returnValueFormatter?: (value: any) => TReturn
  ): AppCallTransactionResultOfType<TReturn> {
    if (result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue =
      result.return?.returnValue !== undefined && returnValueFormatter !== undefined
        ? returnValueFormatter(result.return.returnValue)
        : (result.return?.returnValue as TReturn | undefined)
    return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Action['methods']>(
    typedCallParams: TypedCallParams<TSignature>,
    returnValueFormatter?: (value: any) => MethodReturn<TSignature>
  ) {
    return this.mapReturnValue<MethodReturn<TSignature>>(
      await this.appClient.call(typedCallParams),
      returnValueFormatter
    )
  }

  /**
   * Idempotently deploys the Action smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: ActionDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(ActionCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Action smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(
        args: MethodArgs<'createApplication()void'>,
        params: AppClientCallCoreParams & AppClientCompilationParams & OnCompleteNoOp = {}
      ): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication()void'>>> {
        return $this.mapReturnValue(
          await $this.appClient.create(ActionCallFactory.create.createApplication(args, params))
        )
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Action smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the bootstrap(uint64,uint64,uint64)void ABI method.
   *
   * Sets up the initial configuration of the action.Validates the start and end dates, and the goal amount.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(
    args: MethodArgs<'bootstrap(uint64,uint64,uint64)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(ActionCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the changeTokenAsset(asset)void ABI method.
   *
   * Changes the token asset associated with the contract.This function is intended for use by the governance address.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public changeTokenAsset(
    args: MethodArgs<'changeTokenAsset(asset)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(ActionCallFactory.changeTokenAsset(args, params))
  }

  /**
   * Calls the changeMinDonationAmount(uint64)void ABI method.
   *
   * Changes the minimum donation amount required to participate in the action.This function can only be called by the contract creator.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public changeMinDonationAmount(
    args: MethodArgs<'changeMinDonationAmount(uint64)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(ActionCallFactory.changeMinDonationAmount(args, params))
  }

  /**
   * Calls the donate(axfer)void ABI method.
   *
   * Allows a user to donate to the action.Validates the donation amount and updates the total donations and available balance.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public donate(args: MethodArgs<'donate(axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ActionCallFactory.donate(args, params))
  }

  /**
   * Calls the dispense(uint64,string,uint64,asset)void ABI method.
   *
   * Dispenses funds from the contract for the specified purpose.This function can only be called by the contract creator.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public dispense(
    args: MethodArgs<'dispense(uint64,string,uint64,asset)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(ActionCallFactory.dispense(args, params))
  }

  /**
   * Calls the recollect(address,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public recollect(
    args: MethodArgs<'recollect(address,asset)void'>,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(ActionCallFactory.recollect(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      },
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Action['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get ta() {
        return ActionClient.getIntegerState(state, 'ta')
      },
      get g() {
        return ActionClient.getIntegerState(state, 'g')
      },
      get td() {
        return ActionClient.getIntegerState(state, 'td')
      },
      get sd() {
        return ActionClient.getIntegerState(state, 'sd')
      },
      get ed() {
        return ActionClient.getIntegerState(state, 'ed')
      },
      get mda() {
        return ActionClient.getIntegerState(state, 'mda')
      },
      get ab() {
        return ActionClient.getIntegerState(state, 'ab')
      },
    }
  }

  public compose(): ActionComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain: Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      bootstrap(
        args: MethodArgs<'bootstrap(uint64,uint64,uint64)void'>,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.bootstrap(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } })
        )
        resultMappers.push(undefined)
        return this
      },
      changeTokenAsset(
        args: MethodArgs<'changeTokenAsset(asset)void'>,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.changeTokenAsset(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } })
        )
        resultMappers.push(undefined)
        return this
      },
      changeMinDonationAmount(
        args: MethodArgs<'changeMinDonationAmount(uint64)void'>,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.changeMinDonationAmount(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        )
        resultMappers.push(undefined)
        return this
      },
      donate(args: MethodArgs<'donate(axfer)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() =>
          client.donate(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } })
        )
        resultMappers.push(undefined)
        return this
      },
      dispense(
        args: MethodArgs<'dispense(uint64,string,uint64,asset)void'>,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.dispense(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } })
        )
        resultMappers.push(undefined)
        return this
      },
      recollect(args: MethodArgs<'recollect(address,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() =>
          client.recollect(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } })
        )
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() =>
          client.clearState({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } })
        )
        resultMappers.push(undefined)
        return this
      },
      addTransaction(
        txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>,
        defaultSender?: SendTransactionFrom
      ) {
        promiseChain = promiseChain.then(async () =>
          atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender))
        )
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue
          ),
        }
      },
    } as unknown as ActionComposer
  }
}
export type ActionComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(uint64,uint64,uint64)void ABI method.
   *
   * Sets up the initial configuration of the action.Validates the start and end dates, and the goal amount.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(
    args: MethodArgs<'bootstrap(uint64,uint64,uint64)void'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): ActionComposer<[...TReturns, MethodReturn<'bootstrap(uint64,uint64,uint64)void'>]>

  /**
   * Calls the changeTokenAsset(asset)void ABI method.
   *
   * Changes the token asset associated with the contract.This function is intended for use by the governance address.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeTokenAsset(
    args: MethodArgs<'changeTokenAsset(asset)void'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): ActionComposer<[...TReturns, MethodReturn<'changeTokenAsset(asset)void'>]>

  /**
   * Calls the changeMinDonationAmount(uint64)void ABI method.
   *
   * Changes the minimum donation amount required to participate in the action.This function can only be called by the contract creator.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeMinDonationAmount(
    args: MethodArgs<'changeMinDonationAmount(uint64)void'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): ActionComposer<[...TReturns, MethodReturn<'changeMinDonationAmount(uint64)void'>]>

  /**
   * Calls the donate(axfer)void ABI method.
   *
   * Allows a user to donate to the action.Validates the donation amount and updates the total donations and available balance.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  donate(
    args: MethodArgs<'donate(axfer)void'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): ActionComposer<[...TReturns, MethodReturn<'donate(axfer)void'>]>

  /**
   * Calls the dispense(uint64,string,uint64,asset)void ABI method.
   *
   * Dispenses funds from the contract for the specified purpose.This function can only be called by the contract creator.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  dispense(
    args: MethodArgs<'dispense(uint64,string,uint64,asset)void'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): ActionComposer<[...TReturns, MethodReturn<'dispense(uint64,string,uint64,asset)void'>]>

  /**
   * Calls the recollect(address,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  recollect(
    args: MethodArgs<'recollect(address,asset)void'>,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): ActionComposer<[...TReturns, MethodReturn<'recollect(address,asset)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the Action smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): ActionComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(
    txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>,
    defaultSender?: SendTransactionFrom
  ): ActionComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<ActionComposerResults<TReturns>>
}
export type ActionComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
